//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PostgradoApp
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class POSTGRADODBEntities : DbContext
    {
        public POSTGRADODBEntities()
            : base("name=POSTGRADODBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TALUMNO> TALUMNO { get; set; }
        public virtual DbSet<TALUMNO_TELEFONO> TALUMNO_TELEFONO { get; set; }
        public virtual DbSet<TDICTAMEN_DEVUELTO> TDICTAMEN_DEVUELTO { get; set; }
        public virtual DbSet<TDICTAMEN_INGRESADO> TDICTAMEN_INGRESADO { get; set; }
        public virtual DbSet<TDOCENTE> TDOCENTE { get; set; }
        public virtual DbSet<TDOCENTE_DOCTORADO> TDOCENTE_DOCTORADO { get; set; }
        public virtual DbSet<TDOCENTE_MAESTRIA> TDOCENTE_MAESTRIA { get; set; }
        public virtual DbSet<TDOCENTE_PROFESION> TDOCENTE_PROFESION { get; set; }
        public virtual DbSet<TDOCENTE_TELEFONO> TDOCENTE_TELEFONO { get; set; }
        public virtual DbSet<TDOCTORADO> TDOCTORADO { get; set; }
        public virtual DbSet<TMAESTRIA> TMAESTRIA { get; set; }
        public virtual DbSet<TPROFESION> TPROFESION { get; set; }
        public virtual DbSet<TUSUARIO> TUSUARIO { get; set; }
        public virtual DbSet<TALUMNO_TELEFONOVIEW> TALUMNO_TELEFONOVIEW { get; set; }
        public virtual DbSet<TALUMNOFULLNAMEVIEW> TALUMNOFULLNAMEVIEW { get; set; }
        public virtual DbSet<TALUMNOVIEW> TALUMNOVIEW { get; set; }
        public virtual DbSet<TDICTAMEN_DEVUELTOVIEW> TDICTAMEN_DEVUELTOVIEW { get; set; }
        public virtual DbSet<TDICTAMEN_INGRESADOVIEW> TDICTAMEN_INGRESADOVIEW { get; set; }
        public virtual DbSet<TDOCENTE_DOCTORADOVIEW> TDOCENTE_DOCTORADOVIEW { get; set; }
        public virtual DbSet<TDOCENTE_MAESTRIAVIEW> TDOCENTE_MAESTRIAVIEW { get; set; }
        public virtual DbSet<TDOCENTE_PROFESIONVIEW> TDOCENTE_PROFESIONVIEW { get; set; }
        public virtual DbSet<TDOCENTE_TELEFONOVIEW> TDOCENTE_TELEFONOVIEW { get; set; }
        public virtual DbSet<TDOCENTEFULLNAMEVIEW> TDOCENTEFULLNAMEVIEW { get; set; }
        public virtual DbSet<TDOCENTEVIEW> TDOCENTEVIEW { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
